using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace SaveFiles
{
    public static class PlayerPrefsProxy
    {
        private const string PLAYER_PREFS_KEY = "SaveData";

        /// <summary>
        /// Returns a boolean value indicating whether or not save data has already been saved at least once
        /// </summary>
        /// <returns>True, if save data already exists, false if not</returns>
        public static bool HasExistingSaveData()
        {
            return PlayerPrefs.HasKey(PLAYER_PREFS_KEY);
        }

        /// <summary>
        /// Deletes all currently stored save-data
        /// </summary>
        public static void DeleteSaveData()
        {
            PlayerPrefs.DeleteKey(PLAYER_PREFS_KEY);
        }

        /// <summary>
        /// Returns (and implicitly upgrades outdated) currently save data
        /// </summary>
        /// <returns>A <see cref="SaveData"/> representing the currently saved data</returns>
        public static SaveData Load()
        {
            if (!PlayerPrefs.HasKey(PLAYER_PREFS_KEY))
            {
                throw new KeyNotFoundException($"No previously saved game settings available to load - call {nameof(HasExistingSaveData)}() first, to make sure there is SaveData available to load");
            }

            // store this, as loading PlayerPrefs can be slow on certain platforms
            var saveDataFromPlayerPrefs = PlayerPrefs.GetString(PLAYER_PREFS_KEY);

            var currentlyStoredSaveData = JsonConvert.DeserializeObject<SaveData>(saveDataFromPlayerPrefs);

            // assert that stored game settings are never newer than is supported in this version of the game
            if (currentlyStoredSaveData.Version > SaveData.LatestVersion)
            {
                throw new NotSupportedException($"The game settings version stored on this machine ('{currentlyStoredSaveData.Version}') are newer than this version of the game supports ('{SaveData.LatestVersion}') - make sure you are running the latest version of the game");
            }

            // if stored SaveData is older than save files generated by this version of the game,
            // we need to upgrade them to the current format
            if (currentlyStoredSaveData.Version < SaveData.LatestVersion)
            {
                currentlyStoredSaveData = CreateUpgradedSaveData(currentlyStoredSaveData.Version, JObject.Parse(saveDataFromPlayerPrefs));
                Save(currentlyStoredSaveData);
            }

            return currentlyStoredSaveData;
        }

        public delegate void OperationOnCurrentSaveData(ref SaveData saveData);

        /// <summary>
        /// Public interface to use when making changes to the current SaveData
        /// </summary>
        /// <param name="operation">Method that makes changes to the currently saved data by modifying a SaveData object</param>
        public static void UpdateCurrentSaveData(OperationOnCurrentSaveData operation)
        {
            var currentSaveData = HasExistingSaveData() ? Load() : new SaveData(SaveData.LatestVersion);
            operation(ref currentSaveData);
            Save(currentSaveData);
        }

        /// <summary>
        /// Takes information about an outdated instance of SaveData, and generates `upgradedSaveData`
        /// </summary>
        /// <remarks>
        /// If attempting to `Load()` encounters data where <see cref="SaveData.Version"/>
        /// is lower than <see cref="SaveData.LatestVersion"/>, we need to migrate this object from the old format to the current one
        /// </remarks>
        /// <param name="outdatedVersion">Version <see cref="outdatedSettingsJSON"/> is based on</param>
        /// <param name="outdatedSettingsJSON">A JObject containing the currently stored and outdated save data</param>
        /// <returns>A new <see cref="SaveData"/> instance which represents the upgraded SaveData</returns>
        private static SaveData CreateUpgradedSaveData(int outdatedVersion, JToken outdatedSettingsJSON)
        {
            // start by attempting to migrate all fields that still fit the new layout
            var newSaveFile = outdatedSettingsJSON.ToObject<SaveData>();

            //////////
            // currently void, as there is only SaveData of version 1 at this time
            // if the layout of SaveData is changed, manually grab old fields from `outdatedSettingsJSON`
            // here and assign them to their new location
            //////////

            newSaveFile.Version = SaveData.LatestVersion;

            return newSaveFile;
        }

        /// <summary>
        /// Persists the supplied <see cref="SaveData"/> object by serializing it to JSON and storing it using PlayerPrefs
        /// </summary>
        /// <param name="saveData">Instance of <see cref="SaveData"/> to serialize to JSON and store using PlayerPrefs</param>
        private static void Save(SaveData saveData)
        {
            PlayerPrefs.SetString(PLAYER_PREFS_KEY, JsonConvert.SerializeObject(saveData));
            PlayerPrefs.Save();
        }

        /// <summary>
        /// If no save data has been persisted yet, this method creates a <see cref="SaveData"/> instance with the default configuration and saves it
        /// </summary>
        public static void EnsureSaveDataExists()
        {
            if (HasExistingSaveData())
            {
                return;
            }

            // create a new save file with default values
            UpdateCurrentSaveData((ref SaveData _) => {});
        }
    }
}
